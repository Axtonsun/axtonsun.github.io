<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>论文笔记 on Axton</title>
    <link>https://axtonsun.github.io/categories/%E8%AE%BA%E6%96%87%E7%AC%94%E8%AE%B0/</link>
    <description>Recent content in 论文笔记 on Axton</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>Copyright © 2022–2022, Axton; all rights reserved.</copyright>
    <lastBuildDate>Mon, 26 Dec 2022 22:44:30 +0800</lastBuildDate><atom:link href="https://axtonsun.github.io/categories/%E8%AE%BA%E6%96%87%E7%AC%94%E8%AE%B0/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>图数据流的模型、算法和系统</title>
      <link>https://axtonsun.github.io/posts/graphstream2018/</link>
      <pubDate>Mon, 26 Dec 2022 22:44:30 +0800</pubDate>
      
      <guid>https://axtonsun.github.io/posts/graphstream2018/</guid>
      <description>1.大规模流数据的机遇与挑战 图模型的点、边元素非常适用于建模复杂数据中的对象以及对象间的关联和交互，点和边上的属性、标签以及相关数据等的自由定义使得图模型能够很容易地以统一的形式表达不同的对象及其间的交互行为。
图模型非常适合用来建模大规模复杂数据。图模型上的计算却很难应对图数据高速更新的场景。
数据流中的元素往往具有统一简单的格式，并且元素之间相对独立，缺少对对象关联的建模。数据流模型的相关算法很难扩展到需要图模型建模的复杂数据上。
人们急需一种既能够为复杂数据建模，又能够应对更新挑战的新的数据模型、技术来满足相应的信息管理需求。
2.流计算系统 这些流系统和流计算库的核心思想都是针对流式的输入利用集群进行协作计算，而整体的数据依赖所形成的框架则为一个有向无环图，因此集群的整体协作更像是流水线的协作，计算框架中的数据依赖所形成的数据流动方向基本上是单一既定的。
对于很多图计算而言，计算的逻辑并不是流水线式的流系统能容易处理 的 。图具有很强的表达能力，数据与数据之间的关联紧密，路径、连通分量等图计算使数据间的独立性比较低，单条边的变化可能对整个图的结构特征产生全局的影响。而且，图数据计算中的中间结果较多（如子图查询中的部分解），在分布式集群下的传输代价很高。因此，流式系统往往难以支撑大规模图数据流的计算。
3.图数据流模型 3.1 图的流式计算 定义：给定一个静态的图，在一遍或多遍顺序地读取对应的图数据的过程中，获得预期数据信息或完成既定操作的计算问题。
关注的重点主要是在空间有限无法载入整个大图时，如何多次遍历图数据完成相应图计算 流式计算涉及很多经典的图计算问题，包括多种图的属性特征计算和相关的图结构操作等 图流式访问的研究问题包含众多图计算的经典问题 三角形计算 Bar-YossefZ等人1结合relative近似和ratio-近似，提出了一个基于归约（reduction）的流式访问模型下的流算法，其中就以三角形计数流算法作为应用来分析，主要提到了两种流访问的形式： 一种是以边为项的邻接边流（adjacency流），边的前后顺序任意； 另一种是以点及其邻居的星状点流（incidence流），每个项是一个顶点及其邻居形成的星状结构。 其后的聚焦在相同问题的两个工作2 3基本沿着近似的思路以及adjacency流和incidence流的模型研究流式访问的三角形计数问题，并给出了更优的时间和空间上的相应算法的复杂度 可达性 UnelG等人4使用区间标记解决流式访问的图可达性问题。 首先在必要时对图进行可达性上等价的去环转化，转化过程是线性的。 其次，根据图的去环转化的过程将顶点从前到后打上时间标签，然后流式访问时就按这个时间标签从前到后进行，也就是说这个图数据流模型是设定了流的顺序进行访问的，因为目标在于对大图的可达性的计算，所以这种假设除了离线的时间开销外并没有实际限制。 这种情况下，去环的图可以转化为树，从而将图数据流上的可达性转化为树上的可达性问题，而显然后者是有高效算法的，而且树的空间效率相比图也有很大的提高。 最短路径 有向图流式访问上的最短路径问题最早是在DemetrescuC等人5的一个工作中提出的，是图数据流上空间复杂度和计算所需的遍历次数的权衡问题下的一个图算法的应用。 研究的结论是在给定比特的空间下，有向图的单源最短路径问题可以在\(O(n·logn)\)次遍历过程中解决。 有学者将这类图的流式计算称为图数据流6，但考虑到数据仍是已知的静态图，只是读取的方式是流式的，因此本文将这类能够多遍顺序读取图的计算模型称为图的流式计算模型。
图的流式计算并不能满足当前大规模复杂数据流的计算需求 大规模复杂数据流很难进行多遍读取。图的流式计算中，全局的数据是给定的，而当前应用中实时产生的大量图结构数据则是无限增长的。 流式计算很难应对数据的过期更新操作。图的流式计算显然并不支持数据的删除更新。 以节约内存为初衷而出现的图的流式计算，尽管结合了图模型和类似于数据流模型的流式计算，但显然并不适用于大规模图结构数据流的场景。
3.2 图数据流算法 已有的图数据流模型可以分为 3 种
第一种是基于边流，即边的增删的图数据流。 SongCY等人7提出图数据流下的强仿真计算，对应的图数据流定义为一个包含顶点集、边集、标签集以及时间戳函数的有向图，其中流动的元素为按时间戳先后顺序排列的边，并且在边流上引入了时间窗的概念。 AngelA等人8最先研究了在实时更新的边流上维护密集子图的算法，其边流定义为一个无限序列，序列中的每个元素为给定边及其边权的变化值（增/减）。边本身没有时间戳的概念，但是边权更新的操作带有时间戳。 此外，FANWF等人9以及ChoudhuryS等人10各自的图数据流子图同构中的模型均属于第一种模型。 第二种是基于子图流，即数据流中的元素为一个个小的子图，边本身没有时间戳的概念，而流中的子图元素才有。 IBMWatson研究中心的AggarwalCC等人11利用Min-Hash的相似度衡量方法，将以子图流为形式的图数据流采样成一个静态的抽样集，进而把研究图数据流上的子图模式挖掘转换成了静态的抽样集的频繁模式挖掘的问题。 这个工作中的图数据流模型不支持删除操作，只考虑不断新增的小图，这些小图是作为整个图数据流对应的子图而定义的，彼此之间并不是独立的图。 第三种则是图数据流中，元素是定义在不同点或边集上的独立图数据。 ValariE等人12提出了一个给定动态的大图集合的模型，即大图的数量是一个固定的常数，每次集合都将按增加一个新大图、删除一个最旧的大图的方式更新，进而形成动态的大图集合，然后在大图集合上研究Topk的密集子图的计算算法。 值得注意的是，这个图数据流模型中，不同的大图是定义在不同的顶点集之上的，并不存在这些大图的公共超图的语义。 3.3 图数据流模型定义 数据流模型下的数据元素为图模型定义的元素，图数据中点的意义主要通过边来体现，孤立点在现实中的意义有限，给定一个图的边集就能明确地获得非孤立点的点集。
图数据流：图数据流是一个无限地随时间不断变长的边序列，其中每条边在序列中都有一个对应的时间戳，序列中边的时间戳从前往后是非降序的。
以无限边序列定义的图数据流更具一般性和统一性。
现实应用高速生成数据的同时往往伴随已有数据的高速失效。例如利用社交网络数据进行广告投放时，过时数据的参考价值显然没有新近数据高，而大量的过时数据又会带来高的处理开销，因此，往往可以利用时间窗的概念来聚焦更有时效性的数据。时间窗主要分为两种：基于数据规模的时间窗13和基于时间跨度的时间窗14
时间窗：给定一个图数据流，基于数据规模的时间窗定义为包含最近的给定N条数据边的边序列区间，时间窗内的数据则是最近的N条边；基于时间跨度的时间窗定义为以当前时间为结尾的一个给定时间段\((T_1,T_2)\)内的数据边所形成的边序列区间，而窗口内的边即为过去\(T_2\)-\(T_1\)时间内的所有数据边。 3.4 图数据流与动态图 动态图是指给定一个大图，在大图上出现数据增删的动态行为的模型。
图数据流具有的时间信息更贴合现实世界的交互与联系，而动态图强调图结构随时间的变化，并不一定强调数据自身的时间信息。
4.图数据流的研究前景：算法和系统 传统的图计算的问题在图数据流模型下仍然会有研究价值，包括三角形计算15 16、最短路径17 18、子图查询19、子图挖掘20以及图分类21、图聚类22等。
4.1 问题的角度 图数据流的一个非常本质的特征就是边的时间信息。 图数据流的查询问题可以引入时序的限制。 例如，在子图查询中引入对边的时序限制7。 引入基于边的时间间隔限制等，以丰富图数据流相关查询的语义 利用图数据流的时间维度分析和挖掘数据的变化行为。 充满挑战但又有极大研究价值的图数据流上的行为预测，即根据已有的图数据流上的数据分布、行为变化，综合关联的结构信息，预测未来一段时间可能出现的图数据特征，包括分布、关联等。 例如，在交通网络上将交通站点建模成顶点，站点间的车流建模成边，这个模型下一个值得研究的问题就是如何根据过去几个小时的车流信息预测未来一个时间段内各条道路可能的车流密度。 在网络信息传输管道上，如何根据当前的网络状况预测接下来的网络流量拥堵情况，进而进行更合理的路由调度等，也是值得研究的问题。 4.</description>
    </item>
    
    <item>
      <title>动态图模式匹配技术综述</title>
      <link>https://axtonsun.github.io/posts/dynamicgraphpatternmatching2018/</link>
      <pubDate>Tue, 06 Dec 2022 16:22:39 +0800</pubDate>
      
      <guid>https://axtonsun.github.io/posts/dynamicgraphpatternmatching2018/</guid>
      <description>图(graph)作为一种广泛使用的数据结构，非常适合刻画这种存在内在关联性的数据，图中的每个节点代表现实世界中的实体对象，节点之间的边表示实体之间的关系。
动态图模式匹配技术(dynamic graph pattern matching techniques)是分析动态图数据上高效查询的重要手段，广泛应用于众多重要领域。
动态图模式匹配技术是指在一个实时更新的图中找到与给定模式图相匹配的子图，这里的匹配是指结构相同以及满足特定的语义关系等。
现有动态图数据匹配相关研究工作主要从以下几个方面展开：
针对动态图数据频繁更新的特性，研究增量处理技术，仅对动态图数据更新的部分进行分析和匹配； 针对动态图数据规模大的特性，研究如何利用分布式并行图处理框架，来加速动态图的匹配计算； 针对动态图分析实时性要求高的特性，除了综合运用增量处理技术和分布式并行图处理框架降低匹配处理时延之外，还有学者研究图匹配的近似计算技术，在求解时延和匹配结果假阳性错误率之间做权衡。 1. 动态图匹配问题的定义和分类 1.1 基本动态图匹配问题 通常用三元组\((V,E,L)\)对图数据进行形式化描述，其中\(V\)表示图中节点的集合，\(E\)表示图中边的集合，对于任意一条边\(e\in E\)，由节点\((v_i,v_j)\)构成，其中\(v_i,v_j\in V\)。图中的边和节点可以带有属性信息，\(L\)表示属性映射函数，将节点或边映射到一个或一组属性上。用符号 \(G,P,u,v\)分别表示数据图、模式图(或查询图)、单个数据图节点和单个模式图节点。 目前业界所使用的数据图\(G\)的类型可以分为两种：第一种数据图是超大图，第二种数据图是由大量的小图组成。 动态图又称图流(graph streams)，是指会随时间发生变化的图。
动态图的更新形式可分为以下两类：
图结构更新，随着时间推移，图数据中的节点和边会被插入和删除，从而导致图数据的结构发生变化； 图内容更新，随着时间推移，图数据中的节点和边所关联的数据对象的内容或属性会发生改变，从而导致图数据的内容发生变化。 1.1.1 图结构更新 定义1. 动态图
已知初始数据图\(G\)，引发数据图更新的操作可以用三元组\(\left \langle op,u_i,u_j \right \rangle\) 表示。其中，\(op=\{I,D\}\)表示操作类型，\(op=I\)时表示增加边操作，\(op=D\)时表示删除边操作；\(u_i\)和\(u_j\)表示数据图中与操作\(op\)相关的两个图节点。若用更新操作集合 \(GC_t = \left \{ \left \langle op_1,u_1,u_2 \right \rangle,...,\left \langle op_k,u_k,u_{k+1} \right \rangle \right \}\left ( k\ge 1 \right )\)表示数据图\(G\)在\(t\)时刻的所有更新操作，用 \(GC:G→G&#39;\)表示数据图\(G\)基于更新操作集合\(GC\)更新后得到新数据图\(G&#39;\)的过程，则时间域\([0,T]\)上的动态图\(G_{D}^{[0,T]}\)是一个数据图序列，定义为 $$ G_{D}^{[0,T]}=\{ G_0,G_1,G_2,&amp;hellip;,G_T \} $$
$$ G_0=G,GC_0=\phi,GC_t:G_{t-1}\to G_t\left ( 1 \le t \le T \right ) $$</description>
    </item>
    
    <item>
      <title>大规模图数据匹配技术综述</title>
      <link>https://axtonsun.github.io/posts/graphpatternmatching2015/</link>
      <pubDate>Mon, 05 Dec 2022 23:04:15 +0800</pubDate>
      
      <guid>https://axtonsun.github.io/posts/graphpatternmatching2015/</guid>
      <description>图作为一种广泛应用的数据结构，非常适合刻画这种具有内在关联性的数据，许多领域的问题都可以通过图的相关理论和技术解决，例如社交网络与Web网络分析、推荐系统、社会安全分析、生物数据分析等。
图模式匹配技术(graph pattern matching)作为实现图数据上高效查询的重要手段，广泛应用于上述各领域的实际问题中。
面对海量关联数据带来的新挑战，各大公司纷纷提出了图数据处理的并行计算模型和系统，包括谷歌公司的大规模图数据处理系统Pregel1、微软研究院的大规模分布式图数据查询(querying large distributed graphs)系统2以及CMU Select实验室研发的GraphLab系统3，这些系统采用分布式计算等技术支持大规模图数据上的高效匹配、查询等算法。
对千万级甚至更大规模的图数据进行高效、准确的匹配查询仍然面临一些问题：
匹配问题复杂 子图同构(subgraph isomorphism)问题属于NP-Complete问题4 措施 设计更高效的搜索算法 采用近似算法 数据规模巨大 采用数据挖掘等技术提取图中的路径、树、子图作为索引特征 数据更新频繁 引入增量处理技术 在所有图匹配问题中，子图同构(subgraph isomorphism)是需要解决的基本问题。
1.图匹配问题 基本的图匹配问题与定义 定义三元组\((V,E,L)\)表示一个图，其中\(V\)表示图中节点的集合，$E$表示图中边的集合，对于任意一条边\(e\in E\)，由节点\((v_i,v_j)\)构成，其中\(v_i,v_j\in V\)。图中的边喝节点可以带有属性信息，\(L\)表示属性 映射函数，将节点或边映射到一个或一组属性上。 一个数据图与模式图的精确匹配问题称为子图同构，需要在数据图中搜索出与模式图在结构和节点与边属性上完全匹配的子图。
精确图匹配问题需要在数据图中找到所有满足上述条件的子图作为模式图的匹配结果。
扩展的图匹配问题 结构匹配和语义匹配
图匹配问题按图数据是否在节点和边上包含语义信息分为语义匹配和结构匹配。
图匹配的许多前期研究基于严格的图结构相似性，即保证所匹配的节点周围具有相同的连通结构，这种匹配问题称为结构匹配，主要应用于化学物质相似结构的检测。
结构匹配的代表性算法包括1976年最早提出的Ullmann算法5以及近年来在该算法基础上改进的VF26，QuickSI7，GraphQL8，Spath9等算法。
在匹配这类图数据时，需要同时保证匹配结果在结构和语义信息上与模式图一致，这种匹配问题称为语义匹配。如典型的GraphGrep10算法。
精确匹配和近似匹配
图匹配问题按匹配结果是否要求与模式图完全一致分为精确匹配和近似匹配。
精确匹配指匹配的结果和模式图的结构及属性完全一致，这种匹配方式主要应用于对匹配结果的准确率要求较高的领域，包括生物数据分析、社会安全分析等，前面介绍的结构匹配算法和语义匹配算法都属于典型的精确匹配技术。
近似匹配是一种可以容忍结果中存在一定噪声和错误的匹配算法，代表性的近似匹配算法包括SUBDUE11，LAW12等，主要通过定义编辑距离、最大公共子图(minium common subgraph)、最小公共超图(minimum common supergraph)等方法衡量两个图的相似程度。
静态图匹配和动态图匹配
图匹配问题按数据图是否更新分为动态图匹配和静态图匹配。
静态图匹配要求所有的数据图不随着时间推移而变化，GIndex13是最有代表性的静态图匹配算法，后续还有FG-Index14，Tree+delta15等算法。
动态图匹配能够在图数据更新时满足实时匹配的性能需求。主要采用增量处理技术，仅对更新的数据图进行分析，代表性工作包括文献161718。
最优算法和近似算法
图匹配算法按是否能获得准确结果分为最优算法和近似算法
最优算法保证匹配结果完全精确，例如精确匹配问题的最优算法可以保证计算结果与模式图完全同构，近似匹配问题的最优算法获得与模式图最近似的一系列匹配结果。
近似算法不同于近似匹配，近似算法通常基于概率统计等数学模型，非常适合动态图匹配等对算法实时性要求较高且只需满足一定准确率的匹配问题。
2.精确图匹配技术 Exact Graph Pattern Matching Non-index-based Matching Ullmann(1976) VF2(2001) GraphQL(2008) GADDI(2009) Spath(2010) Index-based Matching Non-mining-based Matching GraphGrep(2002) CTree(2006) GCoding(2008) Mining-based Matching GIndex(2004) FG-Index(2007) Tree-Delta(2007) 无索引的匹配技术 精确图匹配是一种NP完全问题，算法设计时利用图中的结构和语义信息可以有效提高图匹配的性能。</description>
    </item>
    
    <item>
      <title>云计算环境下的大规模图数据处理技术</title>
      <link>https://axtonsun.github.io/posts/graphdataprocessing2011/</link>
      <pubDate>Sun, 04 Dec 2022 17:36:10 +0800</pubDate>
      
      <guid>https://axtonsun.github.io/posts/graphdataprocessing2011/</guid>
      <description>1.引言 图是计算机科学中最常用的一类抽象数据结构，在结构和语义方面比线性表和树更为复杂，更具一般性表示能力。
大规模图数据处理问题 以搜索引擎中常用的PageRank计算1为例，一个网页的 PageRank得分根据网页之间相互的超链接关系计算而得到。将网页用图顶点表示，网页之间的链接关系用有向边表示，按邻接表形式存储100亿个图顶 点和600亿条边，假设每个顶点及出度边的存储空间占100字节，那么整个图的存储空间将超过1TB
如此大规模的图，对其存储、更新、查找等处理的时间开销和空间开销远远超出了传统集中式图数据管理的承受能力。针对大规模图数据的高效管理，如存储、索引、更新、查找等,已经成为急需解决的问题.
采用云计算环境处理大规模图的优势 云计算是网格计算、分布式计算、并行计算、效用计算、网络存储、虚拟化等先进计算机技术和网络技术发展融合的产物，具有普遍适用性。
依靠云计算环境对大规模图数据进行高效处理，是一个非常有发展潜力的方向，主要优势表现在
海量的图数据存储和维护能力 强大的分布式并行处理能力 良好的可伸缩性和灵活性 关键技术挑战 云环境下的大规模图处理主要面临两大挑战
图计算的强耦合性 在一个图中，数据之间都是相互关联的，图的计算也是相互关联的。 在预处理阶段，进行合适的图分割时，尽可能地降低子图之间的耦合性； 在执行阶段，应选取合适的图计算模型，避免迭代过程中反复启动任务和读写磁盘，降低任务调度开销和IO开销。 云计算节点的低可靠性 需要考虑有效的容错管理机制，减少大规模图处理过程中的故障恢复开销，尽量避免重复计算，提高大规模图处理的运算效率和稳定性。 为了解决云计算环境下的大规模图处理问题, 可从图数据管理和图处理机制两方面加以考虑： 在图数据管理上，需要解决图数据的分割、图数据的存储、图数据索引的建立、图查询处理等问题 在图处理机制上，需要解决处理过程中图计算模型选取、同步控制、消息通信、容错管理和可伸缩性等问题 2.图数据模型与存储管理 图数据模型 按照图中节点的复杂程度分为简单节点图模型和复杂节点图模型2
按照一条边可以连接的顶点数目分为简单图模型和超图模型
不论是简单图模型、超图模型、简单节点模型还是复杂节点模型,它们的顶点和边都可以带有属性
简单图模型 简单图中,一 条边只能连接两个顶点允许存在环路 简单图的存储和处理都比较容易，对于一般的应用，简单图的表达能力完全可以胜任，如PageRank计算、最短路径查询等 Pregel、Hama等系统均采用简单图模型来组织存储和处理大规模图数据 超图模型 一条边可以连接任意数目的图顶点，此模型中图的边称为超边 基于这种特点，超图比上述简单图的适用性更强，保留的信息更多 图数据的存储方式 简单图和超图两种数据模型都可以处理有向图和无向图，默认情况是有向图。
简单图模型的常用存储结构包括邻接矩阵、邻接表、十字链表和邻接多重表等多种方式
从大规模图处理的应用需求和维护的复杂程度考虑，邻接矩阵和邻接表是最常用的两种结构
采用邻接矩阵表示图的拓扑结构，直观简洁，便于快速查找顶点之间的关系，但是邻接矩阵的存储代价高昂，对于大规模图数据,这个问题尤为严重。 邻接表的应用更加广泛，像PageRank计算、最短路径计算等应用，并不需要频繁查找两个图顶点之间的连通性，邻接表完全可以满足计算需求。邻接表的存储开销小，逻辑简单，便于分割处理，是一种比较理想的图组织方式，Pregel3、Hama4和HaLoop5等系统均采用邻接表的形式组织图数据。 超图模型的组织方式主要是关系矩阵。
云环境下的存储系统分为两种
以GFS6、HDFS为代表的分布式文件系统，对于邻接矩阵和邻接表等结构，可以直接存放 以BigTable7、Hbase为代表的NoSQL(Not Only SQL)分布式数据库。 NoSQL数据库采用的数据模型主要有 文档存储模型 CouchDB和MongoDB采用这种存储模型 不太适合以邻接矩阵或邻接表组织的图数据 列式存储模型 BigTable、Hbase、Cassandra采用这种存储模型 Key Value 存储模型 较为适合存储大规模图数据 Dynamo8和SimpleDB采用这种存储模型 图存储模型 Neo4j采用这种模型存储图数据 图数据的索引结构 索引是传统关系数据库中的关键技术，包括B+树索引、Hash索引、位图索引等。
从使用目的和实际效果的角度，索引可分为两大类 一种是为支持普通查询而在云计算环境下建立索引，有助于提高数据查找效率，主要在分布式图数据库中使用 另一种是为加快计算处理而建立的索引，主要在图的计算处理应用中使用，如最短路径计算、PageRank计算、聚类分析等 目前的云环境下用于数据管理的索引结构可以分为适用于P2P网络结构的索引以及适用于Shared-nothing集群结构的索引
Neo4j的索引分为两类 数据库本身就是一个树形结构的索引，可用于提高查询效率； 还可以使用独立的Lucene索引，提供全文索引和索引命中率排序功能。 3.</description>
    </item>
    
  </channel>
</rss>
