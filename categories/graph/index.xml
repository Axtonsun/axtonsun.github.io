<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Graph on Axton</title>
    <link>https://axtonsun.github.io/categories/graph/</link>
    <description>Recent content in Graph on Axton</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>Copyright © 2022–2022, Axton; all rights reserved.</copyright>
    <lastBuildDate>Mon, 05 Dec 2022 23:04:15 +0800</lastBuildDate><atom:link href="https://axtonsun.github.io/categories/graph/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>大规模图数据匹配技术综述</title>
      <link>https://axtonsun.github.io/posts/graphpatternmatching2015/</link>
      <pubDate>Mon, 05 Dec 2022 23:04:15 +0800</pubDate>
      
      <guid>https://axtonsun.github.io/posts/graphpatternmatching2015/</guid>
      <description>图作为一种广泛应用的数据结构，非常适合刻画这种具有内在关联性的数据，许多领域的问题都可以通过图的相关理论和技术解决，例如社交网络与Web网络分析、推荐系统、社会安全分析、生物数据分析等。
图模式匹配技术(graph pattern matching)作为实现图数据上高效查询的重要手段，广泛应用于上述各领域的实际问题中。
面对海量关联数据带来的新挑战，各大公司纷纷提出了图数据处理的并行计算模型和系统，包括谷歌公司的大规模图数据处理系统Pregel1、微软研究院的大规模分布式图数据查询(querying large distributed graphs)系统2以及CMU Select实验室研发的GraphLab系统3，这些系统采用分布式计算等技术支持大规模图数据上的高效匹配、查询等算法。
对千万级甚至更大规模的图数据进行高效、准确的匹配查询仍然面临一些问题：
匹配问题复杂 子图同构(subgraph isomorphism)问题属于NP-Complete问题4 措施 设计更高效的搜索算法 采用近似算法 数据规模巨大 采用数据挖掘等技术提取图中的路径、树、子图作为索引特征 数据更新频繁 引入增量处理技术 在所有图匹配问题中，子图同构(subgraph isomorphism)是需要解决的基本问题。
1.图匹配问题 基本的图匹配问题与定义 定义三元组\((V,E,L)\)表示一个图，其中\(V\)表示图中节点的集合，$E$表示图中边的集合，对于任意一条边\(e\in E\)，由节点\((v_i,v_j)\)构成，其中\(v_i,v_j\in V\)。图中的边喝节点可以带有属性信息，\(L\)表示属性 映射函数，将节点或边映射到一个或一组属性上。 一个数据图与模式图的精确匹配问题称为子图同构，需要在数据图中搜索出与模式图在结构和节点与边属性上完全匹配的子图。
精确图匹配问题需要在数据图中找到所有满足上述条件的子图作为模式图的匹配结果。
扩展的图匹配问题 结构匹配和语义匹配
图匹配问题按图数据是否在节点和边上包含语义信息分为语义匹配和结构匹配。
图匹配的许多前期研究基于严格的图结构相似性，即保证所匹配的节点周围具有相同的连通结构，这种匹配问题称为结构匹配，主要应用于化学物质相似结构的检测。
结构匹配的代表性算法包括1976年最早提出的Ullmann算法5以及近年来在该算法基础上改进的VF26，QuickSI7，GraphQL8，Spath9等算法。
在匹配这类图数据时，需要同时保证匹配结果在结构和语义信息上与模式图一致，这种匹配问题称为语义匹配。如典型的GraphGrep10算法。
精确匹配和近似匹配
图匹配问题按匹配结果是否要求与模式图完全一致分为精确匹配和近似匹配。
精确匹配指匹配的结果和模式图的结构及属性完全一致，这种匹配方式主要应用于对匹配结果的准确率要求较高的领域，包括生物数据分析、社会安全分析等，前面介绍的结构匹配算法和语义匹配算法都属于典型的精确匹配技术。
近似匹配是一种可以容忍结果中存在一定噪声和错误的匹配算法，代表性的近似匹配算法包括SUBDUE11，LAW12等，主要通过定义编辑距离、最大公共子图(minium common subgraph)、最小公共超图(minimum common supergraph)等方法衡量两个图的相似程度。
静态图匹配和动态图匹配
图匹配问题按数据图是否更新分为动态图匹配和静态图匹配。
静态图匹配要求所有的数据图不随着时间推移而变化，GIndex13是最有代表性的静态图匹配算法，后续还有FG-Index14，Tree+delta15等算法。
动态图匹配能够在图数据更新时满足实时匹配的性能需求。主要采用增量处理技术，仅对更新的数据图进行分析，代表性工作包括文献161718。
最优算法和近似算法
图匹配算法按是否能获得准确结果分为最优算法和近似算法
最优算法保证匹配结果完全精确，例如精确匹配问题的最优算法可以保证计算结果与模式图完全同构，近似匹配问题的最优算法获得与模式图最近似的一系列匹配结果。
近似算法不同于近似匹配，近似算法通常基于概率统计等数学模型，非常适合动态图匹配等对算法实时性要求较高且只需满足一定准确率的匹配问题。
2.精确图匹配技术 Exact Graph Pattern Matching Non-index-based Matching Ullmann(1976) VF2(2001) GraphQL(2008) GADDI(2009) Spath(2010) Index-based Matching Non-mining-based Matching GraphGrep(2002) CTree(2006) GCoding(2008) Mining-based Matching GIndex(2004) FG-Index(2007) Tree-Delta(2007) 无索引的匹配技术 精确图匹配是一种NP完全问题，算法设计时利用图中的结构和语义信息可以有效提高图匹配的性能。</description>
    </item>
    
    <item>
      <title>云计算环境下的大规模图数据处理技术</title>
      <link>https://axtonsun.github.io/posts/graphdataprocessing2011/</link>
      <pubDate>Sun, 04 Dec 2022 17:36:10 +0800</pubDate>
      
      <guid>https://axtonsun.github.io/posts/graphdataprocessing2011/</guid>
      <description>1.引言 图是计算机科学中最常用的一类抽象数据结构，在结构和语义方面比线性表和树更为复杂，更具一般性表示能力。
大规模图数据处理问题 以搜索引擎中常用的PageRank计算1为例，一个网页的 PageRank得分根据网页之间相互的超链接关系计算而得到。将网页用图顶点表示，网页之间的链接关系用有向边表示，按邻接表形式存储100亿个图顶 点和600亿条边，假设每个顶点及出度边的存储空间占100字节，那么整个图的存储空间将超过1TB
如此大规模的图，对其存储、更新、查找等处理的时间开销和空间开销远远超出了传统集中式图数据管理的承受能力。针对大规模图数据的高效管理，如存储、索引、更新、查找等,已经成为急需解决的问题.
采用云计算环境处理大规模图的优势 云计算是网格计算、分布式计算、并行计算、效用计算、网络存储、虚拟化等先进计算机技术和网络技术发展融合的产物，具有普遍适用性。
依靠云计算环境对大规模图数据进行高效处理，是一个非常有发展潜力的方向，主要优势表现在
海量的图数据存储和维护能力 强大的分布式并行处理能力 良好的可伸缩性和灵活性 关键技术挑战 云环境下的大规模图处理主要面临两大挑战
图计算的强耦合性 在一个图中，数据之间都是相互关联的，图的计算也是相互关联的。 在预处理阶段，进行合适的图分割时，尽可能地降低子图之间的耦合性； 在执行阶段，应选取合适的图计算模型，避免迭代过程中反复启动任务和读写磁盘，降低任务调度开销和IO开销。 云计算节点的低可靠性 需要考虑有效的容错管理机制，减少大规模图处理过程中的故障恢复开销，尽量避免重复计算，提高大规模图处理的运算效率和稳定性。 为了解决云计算环境下的大规模图处理问题, 可从图数据管理和图处理机制两方面加以考虑： 在图数据管理上，需要解决图数据的分割、图数据的存储、图数据索引的建立、图查询处理等问题 在图处理机制上，需要解决处理过程中图计算模型选取、同步控制、消息通信、容错管理和可伸缩性等问题 2.图数据模型与存储管理 图数据模型 按照图中节点的复杂程度分为简单节点图模型和复杂节点图模型2
按照一条边可以连接的顶点数目分为简单图模型和超图模型
不论是简单图模型、超图模型、简单节点模型还是复杂节点模型,它们的顶点和边都可以带有属性
简单图模型 简单图中,一 条边只能连接两个顶点允许存在环路 简单图的存储和处理都比较容易，对于一般的应用，简单图的表达能力完全可以胜任，如PageRank计算、最短路径查询等 Pregel、Hama等系统均采用简单图模型来组织存储和处理大规模图数据 超图模型 一条边可以连接任意数目的图顶点，此模型中图的边称为超边 基于这种特点，超图比上述简单图的适用性更强，保留的信息更多 图数据的存储方式 简单图和超图两种数据模型都可以处理有向图和无向图，默认情况是有向图。
简单图模型的常用存储结构包括邻接矩阵、邻接表、十字链表和邻接多重表等多种方式
从大规模图处理的应用需求和维护的复杂程度考虑，邻接矩阵和邻接表是最常用的两种结构
采用邻接矩阵表示图的拓扑结构，直观简洁，便于快速查找顶点之间的关系，但是邻接矩阵的存储代价高昂，对于大规模图数据,这个问题尤为严重。 邻接表的应用更加广泛，像PageRank计算、最短路径计算等应用，并不需要频繁查找两个图顶点之间的连通性，邻接表完全可以满足计算需求。邻接表的存储开销小，逻辑简单，便于分割处理，是一种比较理想的图组织方式，Pregel3、Hama4和HaLoop5等系统均采用邻接表的形式组织图数据。 超图模型的组织方式主要是关系矩阵。
云环境下的存储系统分为两种
以GFS6、HDFS为代表的分布式文件系统，对于邻接矩阵和邻接表等结构，可以直接存放 以BigTable7、Hbase为代表的NoSQL(Not Only SQL)分布式数据库。 NoSQL数据库采用的数据模型主要有 文档存储模型 CouchDB和MongoDB采用这种存储模型 不太适合以邻接矩阵或邻接表组织的图数据 列式存储模型 BigTable、Hbase、Cassandra采用这种存储模型 Key Value 存储模型 较为适合存储大规模图数据 Dynamo8和SimpleDB采用这种存储模型 图存储模型 Neo4j采用这种模型存储图数据 图数据的索引结构 索引是传统关系数据库中的关键技术，包括B+树索引、Hash索引、位图索引等。
从使用目的和实际效果的角度，索引可分为两大类 一种是为支持普通查询而在云计算环境下建立索引，有助于提高数据查找效率，主要在分布式图数据库中使用 另一种是为加快计算处理而建立的索引，主要在图的计算处理应用中使用，如最短路径计算、PageRank计算、聚类分析等 目前的云环境下用于数据管理的索引结构可以分为适用于P2P网络结构的索引以及适用于Shared-nothing集群结构的索引
Neo4j的索引分为两类 数据库本身就是一个树形结构的索引，可用于提高查询效率； 还可以使用独立的Lucene索引，提供全文索引和索引命中率排序功能。 3.</description>
    </item>
    
  </channel>
</rss>
