<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Graph on Axton</title>
    <link>https://axtonsun.github.io/categories/graph/</link>
    <description>Recent content in Graph on Axton</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>Copyright © 2022–2022, Axton; all rights reserved.</copyright>
    <lastBuildDate>Sun, 04 Dec 2022 17:36:10 +0800</lastBuildDate><atom:link href="https://axtonsun.github.io/categories/graph/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>云计算环境下的大规模图数据处理技术</title>
      <link>https://axtonsun.github.io/posts/graphdataprocessing2011/</link>
      <pubDate>Sun, 04 Dec 2022 17:36:10 +0800</pubDate>
      
      <guid>https://axtonsun.github.io/posts/graphdataprocessing2011/</guid>
      <description>1.引言 图是计算机科学中最常用的一类抽象数据结构，在结构和语义方面比线性表和树更为复杂，更具一般性表示能力。
大规模图数据处理问题 以搜索引擎中常用的PageRank计算1为例，一个网页的 PageRank得分根据网页之间相互的超链接关系计算而得到。将网页用图顶点表示，网页之间的链接关系用有向边表示，按邻接表形式存储100亿个图顶 点和600亿条边，假设每个顶点及出度边的存储空间占100字节，那么整个图的存储空间将超过1TB
如此大规模的图，对其存储、更新、查找等处理的时间开销和空间开销远远超出了传统集中式图数据管理的承受能力。针对大规模图数据的高效管理，如存储、索引、更新、查找等,已经成为急需解决的问题.
采用云计算环境处理大规模图的优势 云计算是网格计算、分布式计算、并行计算、效用计算、网络存储、虚拟化等先进计算机技术和网络技术发展融合的产物，具有普遍适用性。
依靠云计算环境对大规模图数据进行高效处理，是一个非常有发展潜力的方向，主要优势表现在
海量的图数据存储和维护能力 强大的分布式并行处理能力 良好的可伸缩性和灵活性 关键技术挑战 云环境下的大规模图处理主要面临两大挑战
图计算的强耦合性 在一个图中，数据之间都是相互关联的，图的计算也是相互关联的。 在预处理阶段，进行合适的图分割时，尽可能地降低子图之间的耦合性； 在执行阶段，应选取合适的图计算模型，避免迭代过程中反复启动任务和读写磁盘，降低任务调度开销和IO开销。 云计算节点的低可靠性 需要考虑有效的容错管理机制，减少大规模图处理过程中的故障恢复开销，尽量避免重复计算，提高大规模图处理的运算效率和稳定性。 为了解决云计算环境下的大规模图处理问题, 可从图数据管理和图处理机制两方面加以考虑： 在图数据管理上，需要解决图数据的分割、图数据的存储、图数据索引的建立、图查询处理等问题 在图处理机制上，需要解决处理过程中图计算模型选取、同步控制、消息通信、容错管理和可伸缩性等问题 2.图数据模型与存储管理 图数据模型 按照图中节点的复杂程度分为简单节点图模型和复杂节点图模型2
按照一条边可以连接的顶点数目分为简单图模型和超图模型
不论是简单图模型、超图模型、简单节点模型还是复杂节点模型,它们的顶点和边都可以带有属性
简单图模型 简单图中,一 条边只能连接两个顶点允许存在环路 简单图的存储和处理都比较容易，对于一般的应用，简单图的表达能力完全可以胜任，如PageRank计算、最短路径查询等 Pregel、Hama等系统均采用简单图模型来组织存储和处理大规模图数据 超图模型 一条边可以连接任意数目的图顶点，此模型中图的边称为超边 基于这种特点，超图比上述简单图的适用性更强，保留的信息更多 图数据的存储方式 简单图和超图两种数据模型都可以处理有向图和无向图，默认情况是有向图。
简单图模型的常用存储结构包括邻接矩阵、邻接表、十字链表和邻接多重表等多种方式
从大规模图处理的应用需求和维护的复杂程度考虑，邻接矩阵和邻接表是最常用的两种结构
采用邻接矩阵表示图的拓扑结构，直观简洁，便于快速查找顶点之间的关系，但是邻接矩阵的存储代价高昂，对于大规模图数据,这个问题尤为严重。 邻接表的应用更加广泛，像PageRank计算、最短路径计算等应用，并不需要频繁查找两个图顶点之间的连通性，邻接表完全可以满足计算需求。邻接表的存储开销小，逻辑简单，便于分割处理，是一种比较理想的图组织方式，Pregel3、Hama4和HaLoop5等系统均采用邻接表的形式组织图数据。 超图模型的组织方式主要是关系矩阵。
云环境下的存储系统分为两种
以GFS6、HDFS为代表的分布式文件系统，对于邻接矩阵和邻接表等结构，可以直接存放 以BigTable7、Hbase为代表的NoSQL(Not Only SQL)分布式数据库。 NoSQL数据库采用的数据模型主要有 文档存储模型 CouchDB和MongoDB采用这种存储模型 不太适合以邻接矩阵或邻接表组织的图数据 列式存储模型 BigTable、Hbase、Cassandra采用这种存储模型 Key Value 存储模型 较为适合存储大规模图数据 Dynamo8和SimpleDB采用这种存储模型 图存储模型 Neo4j采用这种模型存储图数据 图数据的索引结构 索引是传统关系数据库中的关键技术，包括B+树索引、Hash索引、位图索引等。
从使用目的和实际效果的角度，索引可分为两大类 一种是为支持普通查询而在云计算环境下建立索引，有助于提高数据查找效率，主要在分布式图数据库中使用 另一种是为加快计算处理而建立的索引，主要在图的计算处理应用中使用，如最短路径计算、PageRank计算、聚类分析等 目前的云环境下用于数据管理的索引结构可以分为适用于P2P网络结构的索引以及适用于Shared-nothing集群结构的索引
Neo4j的索引分为两类 数据库本身就是一个树形结构的索引，可用于提高查询效率； 还可以使用独立的Lucene索引，提供全文索引和索引命中率排序功能。 3.</description>
    </item>
    
  </channel>
</rss>
